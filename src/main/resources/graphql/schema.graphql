schema {
  query: Query
  mutation: Mutation
}

# Enums
enum Category {
  PHYSICAL
  MENTAL
  SLEEP
  DIET
}

enum Frequency {
  DAILY
  WEEKLY
}

enum DaysOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

# Scalars
scalar DateTime
scalar Date
scalar Time

# Core domain types
type AuthToken {
  token: ID!
  expiresAt: DateTime!
  user: User!
}

type Role {
  id: ID!
  name: String!
  permissions: String!
}

type Habit {
  id: ID!
  name: String!
  category: Category!
  description: String!
}

type Guide {
  id: ID!
  title: String!
  content: String!
  category: Category!
  recommendedFor: [Habit!]!
}

type RoutineActivity {
  id: ID!
  habit: Habit!
  duration: String!
  targetTime: String!
  notes: String
  routine: Routine!
}

type Routine {
  id: ID!
  title: String!
  description: String!
  daysOfWeek: [DaysOfWeek!]!
  user: User!
  activities: [RoutineActivity!]!
}

type CompletedActivity {
  id: ID!
  habit: Habit!
  completedAt: DateTime!
  notes: String
  progressLog: ProgressLog!
}

type ProgressLog {
  id: ID!
  date: Date!
  user: User!
  routine: Routine!
  completedActivities: [CompletedActivity!]!
}

type Reminder {
  id: ID!
  user: User!
  habit: Habit!
  time: Time!
  frequency: Frequency!
}

type User {
  id: ID!
  name: String!
  email: String!
  roles: [Role!]!
  favoriteHabits: [Habit!]!
}

# Page types
type RolePage {
  content: [Role!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type HabitPage {
  content: [Habit!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type GuidePage {
  content: [Guide!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type RoutineActivityPage {
  content: [RoutineActivity!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type RoutinePage {
  content: [Routine!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type ProgressLogPage {
  content: [ProgressLog!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type CompletedActivityPage {
  content: [CompletedActivity!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type ReminderPage {
  content: [Reminder!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type UserPage {
  content: [User!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

# Stats types
type CategoryCount {
  category: Category!
  count: Int!
}

type MonthlyStat {
  month: Int!
  year: Int!
  byCategory: [CategoryCount!]!
}

type DailyProgress {
  date: Date!
  completedCount: Int!
}

type WeeklyProgress {
  weekStart: Date!
  daily: [DailyProgress!]!
}

# Input types
input RegisterInput {
  name: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input RoleInput {
  name: String!
  permissions: String!
}

input HabitInput {
  name: String!
  category: Category!
  description: String!
}

input GuideInput {
  title: String!
  content: String!
  category: Category!
  recommendedFor: [HabitInput!]!
}

input RoutineActivityInput {
  habitId: ID!
  duration: String!
  targetTime: String!
  notes: String
}

input CompletedActivityInput {
  habitId: ID!
  completedAt: DateTime!
  notes: String
}

input ProgressLogInput {
  userId: ID!
  routineId: ID!
  date: Date!
  completedActivityInputs: [CompletedActivityInput!]!
}

input ReminderInput {
  user: UserInput!
  habit: HabitInput!
  time: Time!
  frequency: Frequency!
}

input UserInput {
  name: String!
  email: String!
  password: String!
  roles: [RoleInput!]!
  favoriteHabits: [HabitInput!]!
}

# Output types
type AuthTokenOutput {
  token: ID!
  expiresAt: DateTime!
  user: User!
}

type RoleOutput {
  id: ID!
  name: String!
  permissions: String!
}

type HabitOutput {
  id: ID!
  name: String!
  category: Category!
  description: String!
}

type GuideOutput {
  id: ID!
  title: String!
  content: String!
  category: Category!
  recommendedFor: [Habit!]!
}

type RoutineActivityOutput {
  id: ID!
  habit: Habit!
  duration: String!
  targetTime: String!
  notes: String
  routine: Routine!
}

type RoutineOutput {
  id: ID!
  title: String!
  description: String!
  daysOfWeek: [DaysOfWeek!]!
  user: User!
  activities: [RoutineActivity!]!
}

type ProgressLogOutput {
  id: ID!
  date: Date!
  user: User!
  routine: Routine!
  completedActivities: [CompletedActivity!]!
}

type CompletedActivityOutput {
  id: ID!
  habit: Habit!
  completedAt: DateTime!
  notes: String
  progressLog: ProgressLog!
}

type ReminderOutput {
  id: ID!
  time: Time!
  frequency: Frequency!
  user: User!
  habit: Habit!
}

type UserOutput {
  id: ID!
  name: String!
  email: String!
  roles: [Role!]!
  favoriteHabits: [Habit!]!
}

# Query
type Query {
  getCurrentUser(token: String!): User!

  listUsers(page: Int!, size: Int!): UserPage!

  listRoles(page: Int!, size: Int!): RolePage!
  getRoleById(id: ID!): Role

  listHabits(page: Int!, size: Int!): HabitPage!
  listHabitsByCategory(category: Category!, page: Int!, size: Int!): HabitPage!
  getHabitById(id: ID!): Habit

  listGuides(page: Int!, size: Int!): GuidePage!
  listRecommendedGuides(category: Category, forUserId: ID!): GuidePage!
  getGuideById(id: ID!): Guide

  listRoutines(page: Int!, size: Int!): RoutinePage!
  listMyRoutines(page: Int!, size: Int!): RoutinePage!
  listRoutinesByUser(userId: ID!, page: Int!, size: Int!): RoutinePage!
  getRoutineById(id: ID!): Routine

  listRoutineActivities(page: Int!, size: Int!): RoutineActivityPage!
  getRoutineActivityById(id: ID!): RoutineActivity

  listProgressLogs(page: Int!, size: Int!): ProgressLogPage!
  getProgressLogByDate(userId: ID!, date: Date!): ProgressLog
  listProgressLogsByDateRange(userId: ID!, from: Date!, to: Date!, page: Int!, size: Int!): ProgressLogPage!
  getWeeklyStats(userId: ID!, weekStart: Date!): WeeklyProgress!
  getMonthlyStats(userId: ID!, month: Int!, year: Int!): [MonthlyStat!]!
  getProgressLogById(id: ID!): ProgressLog

  listCompletedActivities(page: Int!, size: Int!): CompletedActivityPage!
  getCompletedActivityById(id: ID!): CompletedActivity

  listReminders(page: Int!, size: Int!): ReminderPage!
  listMyReminders(page: Int!, size: Int!): ReminderPage!
  getReminderById(id: ID!): Reminder

  listMyFavoriteHabits(page: Int!, size: Int!): HabitPage!

  getAuthToken(token: String!): AuthToken
}

# Mutation
type Mutation {
  register(input: RegisterInput!): AuthTokenOutput!
  login(input: LoginInput!): AuthTokenOutput!

  createUser(input: UserInput!): UserOutput!
  updateUser(id: ID!, input: UserInput!): UserOutput!
  deleteUser(id: ID!): Boolean!

  createRole(input: RoleInput!): RoleOutput!
  updateRole(id: ID!, input: RoleInput!): RoleOutput!
  deleteRole(id: ID!): Boolean!

  createHabit(input: HabitInput!): HabitOutput!
  updateHabit(id: ID!, input: HabitInput!): HabitOutput!
  deleteHabit(id: ID!): Boolean!

  createGuide(input: GuideInput!): GuideOutput!
  updateGuide(id: ID!, input: GuideInput!): GuideOutput!
  deleteGuide(id: ID!): Boolean!

  createRoutine(input: RoutineInput!): RoutineOutput!
  updateRoutine(id: ID!, input: RoutineInput!): RoutineOutput!
  deleteRoutine(id: ID!): Boolean!

  createRoutineActivity(routineId: ID!, input: RoutineActivityInput!): RoutineActivityOutput!
  updateRoutineActivity(id: ID!, input: RoutineActivityInput!): RoutineActivityOutput!
  deleteRoutineActivity(id: ID!): Boolean!

  createProgressLog(input: ProgressLogInput!): ProgressLogOutput!
  updateProgressLog(id: ID!, input: ProgressLogInput!): ProgressLogOutput!
  deleteProgressLog(id: ID!): Boolean!

  createCompletedActivity(progressLogId: ID!, input: CompletedActivityInput!): CompletedActivityOutput!
  updateCompletedActivity(id: ID!, input: CompletedActivityInput!): CompletedActivityOutput!
  deleteCompletedActivity(id: ID!): Boolean!

  createReminder(input: ReminderInput!): ReminderOutput!
  updateReminder(id: ID!, input: ReminderInput!): ReminderOutput!
  deleteReminder(id: ID!): Boolean!
}
