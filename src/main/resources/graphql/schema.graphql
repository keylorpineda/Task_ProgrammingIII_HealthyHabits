schema {
  query: Query
  mutation: Mutation
}

enum Category {
  PHYSICAL
  MENTAL
  SLEEP
  DIET
}

enum Frequency {
  DAILY
  WEEKLY
}

scalar DateTime
scalar Date
scalar Time

type AuthToken {
  token: ID!
  expiresAt: DateTime!
  user: User!
}

type CompletedActivity {
  id: ID!
  habit: Habit!
  completedAt: DateTime!
  notes: String
  progressLog: ProgressLog!
}

type Guide {
  id: ID!
  title: String!
  content: String!
  category: Category!
  recommendedFor: [Habit!]!
}

type Habit {
  id: ID!
  name: String!
  category: Category!
  description: String!
}

type Mutation {
  registerUser(input: UserInputInput!): UserOutput!  # si ya declaraste esos tipos
  login(email: String!, password: String!): LoginResult!
}
type LoginResult { ok: Boolean! }


type ProgressLog {
  id: ID!
  date: Date!
  user: User!
  routine: Routine!
  completedActivities: [CompletedActivity!]!
}

type Reminder {
  id: ID!
  user: User!
  habit: Habit!
  time: Time!
  frequency: Frequency!
}

type Role {
  id: ID!
  name: String!
  permissions: String!
}

type Routine {
  id: ID!
  title: String!
  description: String!
  daysOfWeek: [DaysOfWeek!]!
  user: User!
  activities: [RoutineActivity!]!
}

type RoutineActivity {
  id: ID!
  habit: Habit!
  duration: String!
  targetTime: String!
  notes: String
  routine: Routine!
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  roles: [Role!]!
  favoriteHabits: [Habit!]!
}

# Supporting types for pagination
type RolePage {
  content: [Role!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type HabitPage {
  content: [Habit!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type GuidePage {
  content: [Guide!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type RoutineActivityPage {
  content: [RoutineActivity!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type RoutinePage {
  content: [Routine!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type ProgressLogPage {
  content: [ProgressLog!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type CompletedActivityPage {
  content: [CompletedActivity!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type ReminderPage {
  content: [Reminder!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

type UserPage {
  content: [User!]!
  totalPages: Int!
  totalElements: Int!
  size: Int!
  number: Int!
}

# Statistics and progress support types
type CategoryCount {
  category: Category!
  count: Int!
}

type MonthlyStat {
  month: Int!
  year: Int!
  byCategory: [CategoryCount!]!
}

type DailyProgress {
  date: Date!
  completedCount: Int!
}

type WeeklyProgress {
  weekStart: Date!
  daily: [DailyProgress!]!
}

# Input types
input RegisterInput {
  name: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input RoleInput {
  name: String!
  permissions: String!
}

input HabitInput {
  name: String!
  category: Category!
  description: String!
}

input GuideInput {
  title: String!
  content: String!
  category: Category!
  recommendedForIds: [ID!]!
}

input RoutineActivityInput {
  habitId: ID!
  duration: String!
  targetTime: String!
  notes: String
}

input RoutineInput {
  title: String!
  description: String!
  daysOfWeek: [DaysOfWeek!]!
  userId: ID!
  activityInputs: [RoutineActivityInput!]!
}

input CompletedActivityInput {
  habitId: ID!
  completedAt: DateTime!
  notes: String
}

input ProgressLogInput {
  userId: ID!
  routineId: ID!
  date: Date!
  completedActivityInputs: [CompletedActivityInput!]!
}

input ReminderInput {
  userId: ID!
  habitId: ID!
  time: Time!
  frequency: Frequency!
}

input UserInput {
  name: String!
  email: String!
  password: String!
  roleIds: [ID!]!
  favoriteHabitIds: [ID!]
}

# Output types
type AuthTokenOutput {
  token: ID!
  expiresAt: DateTime!
  user: User!
}

type RoleOutput {
  id: ID!
  name: String!
  permissions: String!
}

type HabitOutput {
  id: ID!
  name: String!
  category: Category!
  description: String!
}

type GuideOutput {
  id: ID!
  title: String!
  content: String!
  category: Category!
  recommendedFor: [Habit!]!
}

type RoutineActivityOutput {
  id: ID!
  habit: Habit!
  duration: String!
  targetTime: String!
  notes: String
  routine: Routine!
}

type RoutineOutput {
  id: ID!
  title: String!
  description: String!
  daysOfWeek: [DaysOfWeek!]!
  user: User!
  activities: [RoutineActivity!]!
}

type ProgressLogOutput {
  id: ID!
  date: Date!
  user: User!
  routine: Routine!
  completedActivities: [CompletedActivity!]!
}

type CompletedActivityOutput {
  id: ID!
  habit: Habit!
  completedAt: DateTime!
  notes: String
  progressLog: ProgressLog!
}

type ReminderOutput {
  id: ID!
  time: Time!
  frequency: Frequency!
  user: User!
  habit: Habit!
}

type UserOutput {
  id: ID!
  name: String!
  email: String!
  roles: [Role!]!
  favoriteHabits: [Habit!]!
}

# Query
type Query {

  me(token: String!): User!

  users(page: Int!, size: Int!): UserPage!

  roles(page: Int!, size: Int!): RolePage!
  roleById(id: ID!): Role

  habits(page: Int!, size: Int!): HabitPage!
  habitsByCategory(category: Category!, page: Int!, size: Int!): HabitPage!
  habitById(id: ID!): Habit

  guides(page: Int!, size: Int!): GuidePage!
  recommendedGuides(category: Category, forUserId: ID!): GuidePage!
  guideById(id: ID!): Guide

  routines(page: Int!, size: Int!): RoutinePage!
  myRoutines(page: Int!, size: Int!): RoutinePage!
  routinesByUser(userId: ID!, page: Int!, size: Int!): RoutinePage!
  routineById(id: ID!): Routine

  routineActivities(page: Int!, size: Int!): RoutineActivityPage!
  routineActivityById(id: ID!): RoutineActivity

  progressLogs(page: Int!, size: Int!): ProgressLogPage!
  progressByDate(userId: ID!, date: Date!): ProgressLog
  progressByRange(userId: ID!, from: Date!, to: Date!, page: Int!, size: Int!): ProgressLogPage!
  statsWeekly(userId: ID!, weekStart: Date!): WeeklyProgress!
  statsMonthly(userId: ID!, month: Int!, year: Int!): [MonthlyStat!]!
  progressLogById(id: ID!): ProgressLog

  completedActivities(page: Int!, size: Int!): CompletedActivityPage!
  completedActivityById(id: ID!): CompletedActivity

  reminders(page: Int!, size: Int!): ReminderPage!
  myReminders(page: Int!, size: Int!): ReminderPage!
  reminderById(id: ID!): Reminder

  myFavorites(page: Int!, size: Int!): HabitPage!

  authTokenByToken(token: String!): AuthToken
}

# Mutation
type Mutation {

  register(input: RegisterInput!): AuthTokenOutput!
  login(input: LoginInput!): AuthTokenOutput!

  createUser(input: UserInput!): UserOutput!
  updateUser(id: ID!, input: UserInput!): UserOutput!
  deleteUser(id: ID!): Boolean!

  createRole(input: RoleInput!): RoleOutput!
  updateRole(id: ID!, input: RoleInput!): RoleOutput!
  deleteRole(id: ID!): Boolean!

  createHabit(input: HabitInput!): HabitOutput!
  updateHabit(id: ID!, input: HabitInput!): HabitOutput!
  deleteHabit(id: ID!): Boolean!

  createGuide(input: GuideInput!): GuideOutput!
  updateGuide(id: ID!, input: GuideInput!): GuideOutput!
  deleteGuide(id: ID!): Boolean!

  createRoutine(input: RoutineInput!): RoutineOutput!
  updateRoutine(id: ID!, input: RoutineInput!): RoutineOutput!
  deleteRoutine(id: ID!): Boolean!

  createRoutineActivity(input: RoutineActivityInput!): RoutineActivityOutput!
  updateRoutineActivity(id: ID!, input: RoutineActivityInput!): RoutineActivityOutput!
  deleteRoutineActivity(id: ID!): Boolean!

  createProgressLog(input: ProgressLogInput!): ProgressLogOutput!
  updateProgressLog(id: ID!, input: ProgressLogInput!): ProgressLogOutput!
  deleteProgressLog(id: ID!): Boolean!

  createCompletedActivity(input: CompletedActivityInput!): CompletedActivityOutput!
  updateCompletedActivity(id: ID!, input: CompletedActivityInput!): CompletedActivityOutput!
  deleteCompletedActivity(id: ID!): Boolean!

  createReminder(input: ReminderInput!): ReminderOutput!
  updateReminder(id: ID!, input: ReminderInput!): ReminderOutput!
  deleteReminder(id: ID!): Boolean!
}
